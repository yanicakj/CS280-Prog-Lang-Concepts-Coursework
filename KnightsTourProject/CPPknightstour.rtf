{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // Example program\
#include <iostream>\
#include <string>\
\
using namespace std;\
\
bool missionControl();\
bool Solver(int x, int y, int moveCounter, int board[8][8], int xMoves[8], int yMoves[8]);\
void display(int board[8][8]);\
bool moveChecker(int board[8][8], int x, int y);\
\
int main()\
\{\
  \
  missionControl();\
  cout << "Checking";\
  \
  return 0;\
\}\
\
bool missionControl() \{\
 \
    int board[8][8];\
    int xMoves[8] = \{2, 1, -1, -2, -2, -1, 1, 2\};\
    int yMoves[8] = \{1, 2, 2, 1, -1, -2, -2, -1\};\
    \
    for (int x = 0; x < 8; x++)\
        for (int y = 0; y < 8; y++)\
            board[x][y] = -1;\
            \
    board[0][0] = 1;\
    \
    if (Solver(0, 0, 2, board, xMoves, yMoves)) \{\
        display(board);\
    \} else \{\
        cout << "Not possible" << endl;\
        return false;\
    \}\
        \
    return true;\
\}\
\
bool Solver(int x, int y, int moveCounter, int board[8][8], int xMoves[8], int yMoves[8]) \{\
    \
    int i, nextX, nextY;\
    \
    if (moveCounter == 65)\
         return true;\
\
    for (i = 0; i < 8; i++) \{\
    	nextX = x + xMoves[i];\
    	nextY = y + yMoves[i];\
        if (moveChecker(board, nextX, nextY)) \{\
            board[nextX][nextY] = moveCounter;\
            if (Solver(nextX, nextY, moveCounter + 1, board, xMoves, yMoves))\
                return true;\
            else\
                board[nextX][nextY] = -1;\
        \}\
    \}\
\
    return false;\
\}\
\
void display(int board[8][8]) \{\
    for (int x = 0; x < 8; x++) \{\
            for (int y = 0; y < 8; y++)\
            	if (board[x][y] > 9)\
            		cout << board[x][y] << " ";\
            	else\
            		cout << " " << board[x][y] << " ";\
            cout << endl;\
        \}\
\}\
\
bool moveChecker(int board[8][8], int x, int y) \{\
    \
    bool returnValue;\
	returnValue = (x >= 0 && x < 8 && y >= 0 && y < 8 && board[x][y] == -1);\
	\
    return returnValue;   \
\}}